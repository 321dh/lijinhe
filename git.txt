svn操作符简写
A：add，新增
C：conflict，冲突
D：delete，删除
M：modify，本地已经修改
G：modify and merGed，本地文件修改并且和服务器的进行合并
U：update，从服务器更新
R：replace，从服务器替换
I：ignored，忽略

git简介
git(读音为/gɪt/)是一款免费、开源的分布式版本控制系统。git有三种状态：已提交（committed）、已修改（modified）和已暂存（staged）。
已提交表示数据已经安全的保存在本地数据库中（git仓库）。 
已修改表示修改了文件，但还没保存到数据库中（工作目录）。 
已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中（暂存区域）。
基本的git工作流程如下：
1、在工作目录中修改文件；
2、暂存文件，将文件的快照放入暂存区域；
3、提交更新，找到暂存区域的文件，将快照永久性存储到git仓库目录。

git config配置
1、/etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 --system 选项的 git config 时，它会从此文件读写配置变量。
2、~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 --global 选项让 Git 读写此文件。
3、当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。

git分布式版本控制系统与svn集中式版本控制系统的区别：
git 和其它版本控制系统（如svn ）的主要差别在于git对待数据的方法是直接记录快照，而非差异比较。而其他版本控制系统，则是保存文件随时间逐步累积的差异。
一、优点
	1、离线工作，近乎所有操作都是本地执行；
	2、适合分布式开发，强调个体，公共服务器压力和数据量较小；
	3、对非线性开发模式的强力支持（允许成千上万个并行开发的分支）。
二、缺点
	1、不符合常规思维，学习周期比较长；
	2、整个仓库克隆，代码保密性差。

git操作及命令
1、安装
1）在Linux上安装
	如果你想在 Linux 上用二进制安装程序来安装 git，可以使用发行版包含的基础软件包管理工具来安装
	$ sudo yum install git
2）在Windows上安装
	在 Windows 上安装 git 也有几种安装方法。 官方版本可以在 git 官方网站下载。 打开 http://git-scm.com/download/win，下载会自动开始。 要注意这是一个名为 Git for Windows的项目（也叫做 msysGit），和 git 是分别独立的项目；更多信息请访问 http://msysgit.github.io/。
	另一个简单的方法是安装 GitHub for Windows。 该安装程序包含图形化和命令行版本的 git。 它也能支持 Powershell，提供了稳定的凭证缓存和健全的 CRLF 设置。 稍后我们会对这方面有更多了解，现在只要一句话就够了，这些都是你所需要的。 你可以在 GitHub for Windows 网站下载，网址为 http://windows.github.com。
3）在Mac上安装
	在 Mac 上安装 git 有多种方式。 最简单的方法是安装 Xcode Command Line Tools。 Mavericks （10.9） 或更高版本的系统中，在 Terminal 里尝试首次运行 git 命令即可。 如果没有安装过命令行开发者工具，将会提示你安装。
4）从源代码安装
	如果你想从源码安装 git，需要安装 git 依赖的库：curl、zlib、openssl、expat，还有libiconv。 如果你的系统上有 yum （如 Fedora）或者 apt-get（如基于 Debian 的系统），可以使用以下命令之一来安装最小化的依赖包来编译和安装 Git 的二进制版：
		$ sudo yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel
	为了能够添加更多格式的文档（如 doc, html, info），你需要安装以下的依赖包：
		$ sudo yum install asciidoc xmlto docbook2x
	当你安装好所有的必要依赖，你可以继续从几个地方来取得最新发布版本的 tar 包。 你可以从 Kernel.org 网站获取，网址为 https://www.kernel.org/pub/software/scm/git，或从 GitHub 网站上的镜像来获得，网址为 https://github.com/git/git/releases。 通常在 GitHub 上的是最新版本，但 kernel.org 上包含有文件下载签名，如果你想验证下载正确性的话会用到。
	接着，编译并安装：
	  $ tar -zxvf git-2.0.0.tar.gz
	  $ cd git-2.0.0
	  $ make configure
	  $ ./configure --prefix=/usr
	  $ make all doc info
	  $ sudo make install install-doc install-html install-info
	完成后，你可以使用 Git 来获取 Git 的升级：
	  $ git clone git://git.kernel.org/pub/scm/git/git.git

2、config配置
设置姓名和邮箱
$ git config --global user.name "Jorly"
$ git config --global user.email "lijinhe@321dh.com"

默认使用Emacs文本编辑器
$ git config --global core.editor emacs

让git显示颜色，让命令输出看起来更醒目
$ git config --global color.ui true

设置行尾首选项
	1)Unix/Mac 用户：
		$ git config --global core.autocrlf input
		$ git config --global core.safecrlf true

	2)Windows 用户：
		$ git config --global core.autocrlf true
		$ git config --global core.safecrlf true

查看git所有配置
$ git config --list

检查git某一项配置（git config <key>）
$ git config user.name

3、获取帮助	
$ git help <verb>
$ git <verb> --help
$ man git-<verb>

4、创建代码仓库
$ mkdir gitproject
$ cd gitproject

初始化仓库
$ git init
这时git就把仓库建好了，你会发现当前目录下多了一个.git的目录，可通过ls -ah查看。

5、添加文件并提交到git仓库
$ touch git.txt
$ vi git.txt
添加以下内容并用wq保存：
	Git is a version control system.
	Git is free software.
添加文件到仓库暂存区（如果不add添加，在提交时将不会被提交）	
$ git add git.txt
把文件提交到git仓库
$ git commit -m "添加了一个git文件"

6、查看状态
1）检查当前文件状态
$ git status
nothing to commit, working directory clean 工作目录很干净
Untracked files 未跟踪状态的文件
Changes to be committed 说明是已暂存状态还未提交的文件
Changes not staged for commit 说明已跟踪文件的内容发生了变化，但还没有放到暂存区。

2）状态简览
$ git status -s
（1）新添加的未跟踪文件前面有 ?? 标记；
（2）新添加到暂存区中的文件前面有 A 标记；
（3）修改过的文件前面有 M 标记：
 	靠右边的M表示该文件被修改了但是还没放入暂存区；
 	靠左边的M表示该文件被修改了并放入了暂存区。
	如：
		 M README
		MM Rakefile
		A  lib/git.rb
		M  lib/simplegit.rb
		?? LICENSE.txt

7、比较文件不同
$ git diff git.txt
查看已暂存的将要添加到下次提交里的内容
$ git diff --staged
请注意，git diff 本身只显示尚未暂存的改动，而不是自上次提交以来所做的所有改动。 所以有时候你一下子暂存了所有更新过的文件后，运行 git diff 后却什么也没有，就是这个原因。

8、查看log日志
$ git log
如果感觉输出信息太多，可用
$ git log --pretty=oneline

9、回到某个版本
$ git reset --hard HEAD
1）HEAD 表示当前版本
2）HEAD^ 表示上个版本
3）HEAD^^ 表示上上个版本
4）HEAD~100 表示100个版本
5）回退到指定版本号 git reset --hard 版本号
如果回退之后还想恢复到最新版本，后添加最新版本号
$ git reset --hard b1f19dcf3e（版本号没必要写全，前几位就可以了，git会自动去找）

10、查看每次使用的命令
$ git reflog

11、丢弃工作区的修改
$ git checkout -- 文件名（没有--，就变成了“切换到另一个分支”的命令）

12、把暂存区的修改回退到工作区
$ git reset HEAD readme.txt

撤销修改小结
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

13、从版本库中删除文件
$ git rm test.txt
$ git commit -m "remove test.txt"
rm 只是把文件从本地删除，如果误删则用git checkout -- test.txt进行恢复。

14、创建SSH Key
$ ssh-keygen -t rsa -C "lijinhe@321dh.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/Jorly/.ssh/id_rsa):（确认密钥存储位置）
Created directory '/c/Users/Jorly/.ssh'.
Enter passphrase (empty for no passphrase):(输入密钥口令)
Enter same passphrase again:(确认输入密钥口令)
id_rsa是私钥（保密） id_rsa.pub是公钥（公开）

15、把本地仓库与远程仓库进行关联
$ git remote add origin https://github.com/321dh/lijinhe.git

16、把本地库内容推送到远程库上
$ git push -u origin master
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令:
$ git push origin master
把本地master分支的最新修改推送至GitHub。

17、远程仓库
1）克隆仓库
$ git clone https://github.com/321dh/lijinhe.git
$ cd gitproject
$ ls
git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

2）克隆仓库并自定义本地仓库名称
$ git clone https://github.com/libgit2/libgit2 mylibgit
这将执行克隆时将本地创建的仓库名字变为 mylibgit。

18、创建分支
$ git branch dev

19、切换分支
$ git checkout dev

20、创建分支并切换分支
$ git checkout -b dev
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

21、查看分支
$ git branch
git branch命令会列出所有分支，当前分支前面会标一个*号

22、切换回master分支
$ git checkout master

23、合并指定分支到当前分支
$ git merge dev

24、删除分支
$ git branch -d dev

25、解决冲突
<<<<<<< HEAD
Creating a new branch is quick & simple.
=======
Creating a new branch is quick AND simple.
>>>>>>> abba5eb045e96c637e5613481c52ebec8a6f5f00
Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改后保存即可。

26、用git log --graph命令可以看到分支合并图
$ git log --graph --pretty=oneline --abbrev-commit

27、git merge的--no-ff方式
通常合并分支时，git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
$ git merge --no-ff -m "merge with no-ff" dev

28、工作现场
1、储藏当前的工作现场
$ git stash
2、查看储藏的工作现场
$ git stash list
3、恢复工作现场
$ git stash apply 
删除stash内容
$ git stash drop
或者使用git stash pop恢复并删除stash内容

29、强制删除分支(丢弃未被合并的分支)
$ git branch -D dev

30、查看远程库信息
$ git remote
而git remote -v则显示更详细的信息。

31、推送到远程库分支dev
$ git push origin dev

32、指定本地dev分支与远程origin/dev分支的链接
$ git branch --set-upstream dev origin/dev
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

33、更新最新提交到本地
$ git pull

34、创建标签（默认为HEAD，也可以指定一个commit id）
$ git tag v1.0
创建带有说明的标签，用-a指定标签名，-m指定说明文字
$ git tag -a v0.1 -m "version 0.1 released" 3628164

创建一个过去的标签
1）找到历史提交的commit id
$ git log --pretty=oneline --abbrev-commit
2）创建指定commit id标签
$ git tag v0.9 6224937

35、查看所有标签（标签不是按时间顺序列出，而是按字母排序的）
$ git tag

36、查看标签信息
$ git show v0.9

37、标签删除
$ git tag -d v0.1
删除远程仓库标签
1）先本地删除
$ git tag -d v0.9
2）再远程删除
$ git push origin :refs/tags/v0.9

38、推送标签到远程
推送某个标签到远程
$ git push origin v1.0
一次性推送全部尚未推送到远程的本地标签
$ git push origin --tags

39、忽略特殊文件
$ cat .gitignore
在根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。
文件.gitignore的格式规范如下：
1）所有空行或者以 ＃ 开头的行都会被 Git 忽略。
2）可以使用标准的 glob 模式匹配。
3）匹配模式可以以（/）开头防止递归。
4）匹配模式可以以（/）结尾指定目录。
5）要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。

所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。 星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。 使用两个星号（*) 表示匹配任意中间目录，比如a/**/z 可以匹配 a/z, a/b/z 或 a/b/c/z等。

忽略示例：
# no .a files
*.a

# but do track lib.a, even though you're ignoring .a files above
!lib.a

# only ignore the TODO file in the current directory, not subdir/TODO
/TODO

# ignore all files in the build/ directory
build/

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .pdf files in the doc/ directory
doc/**/*.pdf

40、忽略之后强制添加到文件
$ git add -f filename

41、检查忽略规则
$ git check-ignore -v App.class

附录：
1、要方便管理公钥，用Gitosis
https://github.com/res0nat0r/gitosis
2、像svn控制权限，用Gitolite
https://github.com/sitaramc/gitolite